<?php

/**
 * Base class that represents a row from the 'j014t_negocio' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Nov  9 14:57:52 2015
 *
 * @package    lib.model.om
 */
abstract class BaseJ014tNegocio extends BaseObject  implements Persistent {


  const PEER = 'J014tNegocioPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        J014tNegocioPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_negocio field.
	 * @var        string
	 */
	protected $co_negocio;

	/**
	 * The value for the tx_negocio field.
	 * @var        string
	 */
	protected $tx_negocio;

	/**
	 * The value for the tx_sigla field.
	 * @var        string
	 */
	protected $tx_sigla;

	/**
	 * @var        array J002tUsuario[] Collection to store aggregation of J002tUsuario objects.
	 */
	protected $collJ002tUsuarios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ002tUsuarios.
	 */
	private $lastJ002tUsuarioCriteria = null;

	/**
	 * @var        array J008tDivision[] Collection to store aggregation of J008tDivision objects.
	 */
	protected $collJ008tDivisions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ008tDivisions.
	 */
	private $lastJ008tDivisionCriteria = null;

	/**
	 * @var        array J015tRegionNegocio[] Collection to store aggregation of J015tRegionNegocio objects.
	 */
	protected $collJ015tRegionNegocios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ015tRegionNegocios.
	 */
	private $lastJ015tRegionNegocioCriteria = null;

	/**
	 * @var        array J016tForense[] Collection to store aggregation of J016tForense objects.
	 */
	protected $collJ016tForenses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ016tForenses.
	 */
	private $lastJ016tForenseCriteria = null;

	/**
	 * @var        array J018tInformeForense[] Collection to store aggregation of J018tInformeForense objects.
	 */
	protected $collJ018tInformeForenses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ018tInformeForenses.
	 */
	private $lastJ018tInformeForenseCriteria = null;

	/**
	 * @var        array J020tActaAcc[] Collection to store aggregation of J020tActaAcc objects.
	 */
	protected $collJ020tActaAccs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ020tActaAccs.
	 */
	private $lastJ020tActaAccCriteria = null;

	/**
	 * @var        array J021tActaAie[] Collection to store aggregation of J021tActaAie objects.
	 */
	protected $collJ021tActaAies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ021tActaAies.
	 */
	private $lastJ021tActaAieCriteria = null;

	/**
	 * @var        array J022tActaAnie[] Collection to store aggregation of J022tActaAnie objects.
	 */
	protected $collJ022tActaAnies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ022tActaAnies.
	 */
	private $lastJ022tActaAnieCriteria = null;

	/**
	 * @var        array J030tInformeRecomendaciones[] Collection to store aggregation of J030tInformeRecomendaciones objects.
	 */
	protected $collJ030tInformeRecomendacioness;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ030tInformeRecomendacioness.
	 */
	private $lastJ030tInformeRecomendacionesCriteria = null;

	/**
	 * @var        array J034tIncidente[] Collection to store aggregation of J034tIncidente objects.
	 */
	protected $collJ034tIncidentes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ034tIncidentes.
	 */
	private $lastJ034tIncidenteCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseJ014tNegocio object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_negocio] column value.
	 * 
	 * @return     string
	 */
	public function getCoNegocio()
	{
		return $this->co_negocio;
	}

	/**
	 * Get the [tx_negocio] column value.
	 * 
	 * @return     string
	 */
	public function getTxNegocio()
	{
		return $this->tx_negocio;
	}

	/**
	 * Get the [tx_sigla] column value.
	 * 
	 * @return     string
	 */
	public function getTxSigla()
	{
		return $this->tx_sigla;
	}

	/**
	 * Set the value of [co_negocio] column.
	 * 
	 * @param      string $v new value
	 * @return     J014tNegocio The current object (for fluent API support)
	 */
	public function setCoNegocio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_negocio !== $v) {
			$this->co_negocio = $v;
			$this->modifiedColumns[] = J014tNegocioPeer::CO_NEGOCIO;
		}

		return $this;
	} // setCoNegocio()

	/**
	 * Set the value of [tx_negocio] column.
	 * 
	 * @param      string $v new value
	 * @return     J014tNegocio The current object (for fluent API support)
	 */
	public function setTxNegocio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_negocio !== $v) {
			$this->tx_negocio = $v;
			$this->modifiedColumns[] = J014tNegocioPeer::TX_NEGOCIO;
		}

		return $this;
	} // setTxNegocio()

	/**
	 * Set the value of [tx_sigla] column.
	 * 
	 * @param      string $v new value
	 * @return     J014tNegocio The current object (for fluent API support)
	 */
	public function setTxSigla($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_sigla !== $v) {
			$this->tx_sigla = $v;
			$this->modifiedColumns[] = J014tNegocioPeer::TX_SIGLA;
		}

		return $this;
	} // setTxSigla()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_negocio = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->tx_negocio = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->tx_sigla = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 3; // 3 = J014tNegocioPeer::NUM_COLUMNS - J014tNegocioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating J014tNegocio object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J014tNegocioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = J014tNegocioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collJ002tUsuarios = null;
			$this->lastJ002tUsuarioCriteria = null;

			$this->collJ008tDivisions = null;
			$this->lastJ008tDivisionCriteria = null;

			$this->collJ015tRegionNegocios = null;
			$this->lastJ015tRegionNegocioCriteria = null;

			$this->collJ016tForenses = null;
			$this->lastJ016tForenseCriteria = null;

			$this->collJ018tInformeForenses = null;
			$this->lastJ018tInformeForenseCriteria = null;

			$this->collJ020tActaAccs = null;
			$this->lastJ020tActaAccCriteria = null;

			$this->collJ021tActaAies = null;
			$this->lastJ021tActaAieCriteria = null;

			$this->collJ022tActaAnies = null;
			$this->lastJ022tActaAnieCriteria = null;

			$this->collJ030tInformeRecomendacioness = null;
			$this->lastJ030tInformeRecomendacionesCriteria = null;

			$this->collJ034tIncidentes = null;
			$this->lastJ034tIncidenteCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ014tNegocio:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J014tNegocioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			J014tNegocioPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseJ014tNegocio:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ014tNegocio:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J014tNegocioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseJ014tNegocio:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			J014tNegocioPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = J014tNegocioPeer::CO_NEGOCIO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = J014tNegocioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCoNegocio($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += J014tNegocioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collJ002tUsuarios !== null) {
				foreach ($this->collJ002tUsuarios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ008tDivisions !== null) {
				foreach ($this->collJ008tDivisions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ015tRegionNegocios !== null) {
				foreach ($this->collJ015tRegionNegocios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ016tForenses !== null) {
				foreach ($this->collJ016tForenses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ018tInformeForenses !== null) {
				foreach ($this->collJ018tInformeForenses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ020tActaAccs !== null) {
				foreach ($this->collJ020tActaAccs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ021tActaAies !== null) {
				foreach ($this->collJ021tActaAies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ022tActaAnies !== null) {
				foreach ($this->collJ022tActaAnies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ030tInformeRecomendacioness !== null) {
				foreach ($this->collJ030tInformeRecomendacioness as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ034tIncidentes !== null) {
				foreach ($this->collJ034tIncidentes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = J014tNegocioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collJ002tUsuarios !== null) {
					foreach ($this->collJ002tUsuarios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ008tDivisions !== null) {
					foreach ($this->collJ008tDivisions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ015tRegionNegocios !== null) {
					foreach ($this->collJ015tRegionNegocios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ016tForenses !== null) {
					foreach ($this->collJ016tForenses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ018tInformeForenses !== null) {
					foreach ($this->collJ018tInformeForenses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ020tActaAccs !== null) {
					foreach ($this->collJ020tActaAccs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ021tActaAies !== null) {
					foreach ($this->collJ021tActaAies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ022tActaAnies !== null) {
					foreach ($this->collJ022tActaAnies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ030tInformeRecomendacioness !== null) {
					foreach ($this->collJ030tInformeRecomendacioness as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ034tIncidentes !== null) {
					foreach ($this->collJ034tIncidentes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J014tNegocioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoNegocio();
				break;
			case 1:
				return $this->getTxNegocio();
				break;
			case 2:
				return $this->getTxSigla();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = J014tNegocioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoNegocio(),
			$keys[1] => $this->getTxNegocio(),
			$keys[2] => $this->getTxSigla(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J014tNegocioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoNegocio($value);
				break;
			case 1:
				$this->setTxNegocio($value);
				break;
			case 2:
				$this->setTxSigla($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = J014tNegocioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoNegocio($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTxNegocio($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTxSigla($arr[$keys[2]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);

		if ($this->isColumnModified(J014tNegocioPeer::CO_NEGOCIO)) $criteria->add(J014tNegocioPeer::CO_NEGOCIO, $this->co_negocio);
		if ($this->isColumnModified(J014tNegocioPeer::TX_NEGOCIO)) $criteria->add(J014tNegocioPeer::TX_NEGOCIO, $this->tx_negocio);
		if ($this->isColumnModified(J014tNegocioPeer::TX_SIGLA)) $criteria->add(J014tNegocioPeer::TX_SIGLA, $this->tx_sigla);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);

		$criteria->add(J014tNegocioPeer::CO_NEGOCIO, $this->co_negocio);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoNegocio();
	}

	/**
	 * Generic method to set the primary key (co_negocio column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoNegocio($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of J014tNegocio (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTxNegocio($this->tx_negocio);

		$copyObj->setTxSigla($this->tx_sigla);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getJ002tUsuarios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ002tUsuario($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ008tDivisions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ008tDivision($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ015tRegionNegocios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ015tRegionNegocio($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ016tForenses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ016tForense($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ018tInformeForenses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ018tInformeForense($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ020tActaAccs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ020tActaAcc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ021tActaAies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ021tActaAie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ022tActaAnies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ022tActaAnie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ030tInformeRecomendacioness() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ030tInformeRecomendaciones($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ034tIncidentes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ034tIncidente($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCoNegocio(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     J014tNegocio Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     J014tNegocioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new J014tNegocioPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collJ002tUsuarios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ002tUsuarios()
	 */
	public function clearJ002tUsuarios()
	{
		$this->collJ002tUsuarios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ002tUsuarios collection (array).
	 *
	 * By default this just sets the collJ002tUsuarios collection to an empty array (like clearcollJ002tUsuarios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ002tUsuarios()
	{
		$this->collJ002tUsuarios = array();
	}

	/**
	 * Gets an array of J002tUsuario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J002tUsuarios from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J002tUsuario[]
	 * @throws     PropelException
	 */
	public function getJ002tUsuarios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ002tUsuarios === null) {
			if ($this->isNew()) {
			   $this->collJ002tUsuarios = array();
			} else {

				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				J002tUsuarioPeer::addSelectColumns($criteria);
				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				J002tUsuarioPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ002tUsuarioCriteria) || !$this->lastJ002tUsuarioCriteria->equals($criteria)) {
					$this->collJ002tUsuarios = J002tUsuarioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ002tUsuarioCriteria = $criteria;
		return $this->collJ002tUsuarios;
	}

	/**
	 * Returns the number of related J002tUsuario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J002tUsuario objects.
	 * @throws     PropelException
	 */
	public function countJ002tUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ002tUsuarios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				$count = J002tUsuarioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ002tUsuarioCriteria) || !$this->lastJ002tUsuarioCriteria->equals($criteria)) {
					$count = J002tUsuarioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ002tUsuarios);
				}
			} else {
				$count = count($this->collJ002tUsuarios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J002tUsuario object to this object
	 * through the J002tUsuario foreign key attribute.
	 *
	 * @param      J002tUsuario $l J002tUsuario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ002tUsuario(J002tUsuario $l)
	{
		if ($this->collJ002tUsuarios === null) {
			$this->initJ002tUsuarios();
		}
		if (!in_array($l, $this->collJ002tUsuarios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ002tUsuarios, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J002tUsuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ002tUsuariosJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ002tUsuarios === null) {
			if ($this->isNew()) {
				$this->collJ002tUsuarios = array();
			} else {

				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ002tUsuarioCriteria) || !$this->lastJ002tUsuarioCriteria->equals($criteria)) {
				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ002tUsuarioCriteria = $criteria;

		return $this->collJ002tUsuarios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J002tUsuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ002tUsuariosJoinJ003tRol($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ002tUsuarios === null) {
			if ($this->isNew()) {
				$this->collJ002tUsuarios = array();
			} else {

				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ003tRol($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ002tUsuarioCriteria) || !$this->lastJ002tUsuarioCriteria->equals($criteria)) {
				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ003tRol($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ002tUsuarioCriteria = $criteria;

		return $this->collJ002tUsuarios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J002tUsuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ002tUsuariosJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ002tUsuarios === null) {
			if ($this->isNew()) {
				$this->collJ002tUsuarios = array();
			} else {

				$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J002tUsuarioPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ002tUsuarioCriteria) || !$this->lastJ002tUsuarioCriteria->equals($criteria)) {
				$this->collJ002tUsuarios = J002tUsuarioPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ002tUsuarioCriteria = $criteria;

		return $this->collJ002tUsuarios;
	}

	/**
	 * Clears out the collJ008tDivisions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ008tDivisions()
	 */
	public function clearJ008tDivisions()
	{
		$this->collJ008tDivisions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ008tDivisions collection (array).
	 *
	 * By default this just sets the collJ008tDivisions collection to an empty array (like clearcollJ008tDivisions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ008tDivisions()
	{
		$this->collJ008tDivisions = array();
	}

	/**
	 * Gets an array of J008tDivision objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J008tDivisions from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J008tDivision[]
	 * @throws     PropelException
	 */
	public function getJ008tDivisions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ008tDivisions === null) {
			if ($this->isNew()) {
			   $this->collJ008tDivisions = array();
			} else {

				$criteria->add(J008tDivisionPeer::CO_NEGOCIO, $this->co_negocio);

				J008tDivisionPeer::addSelectColumns($criteria);
				$this->collJ008tDivisions = J008tDivisionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J008tDivisionPeer::CO_NEGOCIO, $this->co_negocio);

				J008tDivisionPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ008tDivisionCriteria) || !$this->lastJ008tDivisionCriteria->equals($criteria)) {
					$this->collJ008tDivisions = J008tDivisionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ008tDivisionCriteria = $criteria;
		return $this->collJ008tDivisions;
	}

	/**
	 * Returns the number of related J008tDivision objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J008tDivision objects.
	 * @throws     PropelException
	 */
	public function countJ008tDivisions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ008tDivisions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J008tDivisionPeer::CO_NEGOCIO, $this->co_negocio);

				$count = J008tDivisionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J008tDivisionPeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ008tDivisionCriteria) || !$this->lastJ008tDivisionCriteria->equals($criteria)) {
					$count = J008tDivisionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ008tDivisions);
				}
			} else {
				$count = count($this->collJ008tDivisions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J008tDivision object to this object
	 * through the J008tDivision foreign key attribute.
	 *
	 * @param      J008tDivision $l J008tDivision
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ008tDivision(J008tDivision $l)
	{
		if ($this->collJ008tDivisions === null) {
			$this->initJ008tDivisions();
		}
		if (!in_array($l, $this->collJ008tDivisions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ008tDivisions, $l);
			$l->setJ014tNegocio($this);
		}
	}

	/**
	 * Clears out the collJ015tRegionNegocios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ015tRegionNegocios()
	 */
	public function clearJ015tRegionNegocios()
	{
		$this->collJ015tRegionNegocios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ015tRegionNegocios collection (array).
	 *
	 * By default this just sets the collJ015tRegionNegocios collection to an empty array (like clearcollJ015tRegionNegocios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ015tRegionNegocios()
	{
		$this->collJ015tRegionNegocios = array();
	}

	/**
	 * Gets an array of J015tRegionNegocio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J015tRegionNegocios from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J015tRegionNegocio[]
	 * @throws     PropelException
	 */
	public function getJ015tRegionNegocios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ015tRegionNegocios === null) {
			if ($this->isNew()) {
			   $this->collJ015tRegionNegocios = array();
			} else {

				$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

				J015tRegionNegocioPeer::addSelectColumns($criteria);
				$this->collJ015tRegionNegocios = J015tRegionNegocioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

				J015tRegionNegocioPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ015tRegionNegocioCriteria) || !$this->lastJ015tRegionNegocioCriteria->equals($criteria)) {
					$this->collJ015tRegionNegocios = J015tRegionNegocioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ015tRegionNegocioCriteria = $criteria;
		return $this->collJ015tRegionNegocios;
	}

	/**
	 * Returns the number of related J015tRegionNegocio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J015tRegionNegocio objects.
	 * @throws     PropelException
	 */
	public function countJ015tRegionNegocios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ015tRegionNegocios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

				$count = J015tRegionNegocioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ015tRegionNegocioCriteria) || !$this->lastJ015tRegionNegocioCriteria->equals($criteria)) {
					$count = J015tRegionNegocioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ015tRegionNegocios);
				}
			} else {
				$count = count($this->collJ015tRegionNegocios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J015tRegionNegocio object to this object
	 * through the J015tRegionNegocio foreign key attribute.
	 *
	 * @param      J015tRegionNegocio $l J015tRegionNegocio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ015tRegionNegocio(J015tRegionNegocio $l)
	{
		if ($this->collJ015tRegionNegocios === null) {
			$this->initJ015tRegionNegocios();
		}
		if (!in_array($l, $this->collJ015tRegionNegocios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ015tRegionNegocios, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J015tRegionNegocios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ015tRegionNegociosJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ015tRegionNegocios === null) {
			if ($this->isNew()) {
				$this->collJ015tRegionNegocios = array();
			} else {

				$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ015tRegionNegocios = J015tRegionNegocioPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J015tRegionNegocioPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ015tRegionNegocioCriteria) || !$this->lastJ015tRegionNegocioCriteria->equals($criteria)) {
				$this->collJ015tRegionNegocios = J015tRegionNegocioPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ015tRegionNegocioCriteria = $criteria;

		return $this->collJ015tRegionNegocios;
	}

	/**
	 * Clears out the collJ016tForenses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ016tForenses()
	 */
	public function clearJ016tForenses()
	{
		$this->collJ016tForenses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ016tForenses collection (array).
	 *
	 * By default this just sets the collJ016tForenses collection to an empty array (like clearcollJ016tForenses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ016tForenses()
	{
		$this->collJ016tForenses = array();
	}

	/**
	 * Gets an array of J016tForense objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J016tForenses from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J016tForense[]
	 * @throws     PropelException
	 */
	public function getJ016tForenses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
			   $this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				J016tForensePeer::addSelectColumns($criteria);
				$this->collJ016tForenses = J016tForensePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				J016tForensePeer::addSelectColumns($criteria);
				if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
					$this->collJ016tForenses = J016tForensePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;
		return $this->collJ016tForenses;
	}

	/**
	 * Returns the number of related J016tForense objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J016tForense objects.
	 * @throws     PropelException
	 */
	public function countJ016tForenses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$count = J016tForensePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
					$count = J016tForensePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ016tForenses);
				}
			} else {
				$count = count($this->collJ016tForenses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J016tForense object to this object
	 * through the J016tForense foreign key attribute.
	 *
	 * @param      J016tForense $l J016tForense
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ016tForense(J016tForense $l)
	{
		if ($this->collJ016tForenses === null) {
			$this->initJ016tForenses();
		}
		if (!in_array($l, $this->collJ016tForenses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ016tForenses, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ017tAlcanceForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ017tAlcanceForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ017tAlcanceForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J016tForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ016tForensesJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ016tForenses === null) {
			if ($this->isNew()) {
				$this->collJ016tForenses = array();
			} else {

				$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J016tForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ016tForenseCriteria) || !$this->lastJ016tForenseCriteria->equals($criteria)) {
				$this->collJ016tForenses = J016tForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ016tForenseCriteria = $criteria;

		return $this->collJ016tForenses;
	}

	/**
	 * Clears out the collJ018tInformeForenses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ018tInformeForenses()
	 */
	public function clearJ018tInformeForenses()
	{
		$this->collJ018tInformeForenses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ018tInformeForenses collection (array).
	 *
	 * By default this just sets the collJ018tInformeForenses collection to an empty array (like clearcollJ018tInformeForenses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ018tInformeForenses()
	{
		$this->collJ018tInformeForenses = array();
	}

	/**
	 * Gets an array of J018tInformeForense objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J018tInformeForenses from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J018tInformeForense[]
	 * @throws     PropelException
	 */
	public function getJ018tInformeForenses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
			   $this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				J018tInformeForensePeer::addSelectColumns($criteria);
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				J018tInformeForensePeer::addSelectColumns($criteria);
				if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
					$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;
		return $this->collJ018tInformeForenses;
	}

	/**
	 * Returns the number of related J018tInformeForense objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J018tInformeForense objects.
	 * @throws     PropelException
	 */
	public function countJ018tInformeForenses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$count = J018tInformeForensePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
					$count = J018tInformeForensePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ018tInformeForenses);
				}
			} else {
				$count = count($this->collJ018tInformeForenses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J018tInformeForense object to this object
	 * through the J018tInformeForense foreign key attribute.
	 *
	 * @param      J018tInformeForense $l J018tInformeForense
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ018tInformeForense(J018tInformeForense $l)
	{
		if ($this->collJ018tInformeForenses === null) {
			$this->initJ018tInformeForenses();
		}
		if (!in_array($l, $this->collJ018tInformeForenses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ018tInformeForenses, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ016tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ002tUsuarioRelatedByCoRevisa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoRevisa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoRevisa($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ002tUsuarioRelatedByCoAprueba($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoAprueba($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoAprueba($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J018tInformeForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ018tInformeForensesJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ018tInformeForenses === null) {
			if ($this->isNew()) {
				$this->collJ018tInformeForenses = array();
			} else {

				$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J018tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ018tInformeForenseCriteria) || !$this->lastJ018tInformeForenseCriteria->equals($criteria)) {
				$this->collJ018tInformeForenses = J018tInformeForensePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ018tInformeForenseCriteria = $criteria;

		return $this->collJ018tInformeForenses;
	}

	/**
	 * Clears out the collJ020tActaAccs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ020tActaAccs()
	 */
	public function clearJ020tActaAccs()
	{
		$this->collJ020tActaAccs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ020tActaAccs collection (array).
	 *
	 * By default this just sets the collJ020tActaAccs collection to an empty array (like clearcollJ020tActaAccs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ020tActaAccs()
	{
		$this->collJ020tActaAccs = array();
	}

	/**
	 * Gets an array of J020tActaAcc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J020tActaAccs from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J020tActaAcc[]
	 * @throws     PropelException
	 */
	public function getJ020tActaAccs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
			   $this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				J020tActaAccPeer::addSelectColumns($criteria);
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				J020tActaAccPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
					$this->collJ020tActaAccs = J020tActaAccPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;
		return $this->collJ020tActaAccs;
	}

	/**
	 * Returns the number of related J020tActaAcc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J020tActaAcc objects.
	 * @throws     PropelException
	 */
	public function countJ020tActaAccs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$count = J020tActaAccPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
					$count = J020tActaAccPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ020tActaAccs);
				}
			} else {
				$count = count($this->collJ020tActaAccs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J020tActaAcc object to this object
	 * through the J020tActaAcc foreign key attribute.
	 *
	 * @param      J020tActaAcc $l J020tActaAcc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ020tActaAcc(J020tActaAcc $l)
	{
		if ($this->collJ020tActaAccs === null) {
			$this->initJ020tActaAccs();
		}
		if (!in_array($l, $this->collJ020tActaAccs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ020tActaAccs, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ016tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ002tUsuarioRelatedByCoElabora($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ002tUsuarioRelatedByCoDestruye($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoDestruye($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoDestruye($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J020tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ020tActaAccsJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ020tActaAccs === null) {
			if ($this->isNew()) {
				$this->collJ020tActaAccs = array();
			} else {

				$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J020tActaAccPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ020tActaAccCriteria) || !$this->lastJ020tActaAccCriteria->equals($criteria)) {
				$this->collJ020tActaAccs = J020tActaAccPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ020tActaAccCriteria = $criteria;

		return $this->collJ020tActaAccs;
	}

	/**
	 * Clears out the collJ021tActaAies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ021tActaAies()
	 */
	public function clearJ021tActaAies()
	{
		$this->collJ021tActaAies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ021tActaAies collection (array).
	 *
	 * By default this just sets the collJ021tActaAies collection to an empty array (like clearcollJ021tActaAies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ021tActaAies()
	{
		$this->collJ021tActaAies = array();
	}

	/**
	 * Gets an array of J021tActaAie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J021tActaAies from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J021tActaAie[]
	 * @throws     PropelException
	 */
	public function getJ021tActaAies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
			   $this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				J021tActaAiePeer::addSelectColumns($criteria);
				$this->collJ021tActaAies = J021tActaAiePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				J021tActaAiePeer::addSelectColumns($criteria);
				if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
					$this->collJ021tActaAies = J021tActaAiePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;
		return $this->collJ021tActaAies;
	}

	/**
	 * Returns the number of related J021tActaAie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J021tActaAie objects.
	 * @throws     PropelException
	 */
	public function countJ021tActaAies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$count = J021tActaAiePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
					$count = J021tActaAiePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ021tActaAies);
				}
			} else {
				$count = count($this->collJ021tActaAies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J021tActaAie object to this object
	 * through the J021tActaAie foreign key attribute.
	 *
	 * @param      J021tActaAie $l J021tActaAie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ021tActaAie(J021tActaAie $l)
	{
		if ($this->collJ021tActaAies === null) {
			$this->initJ021tActaAies();
		}
		if (!in_array($l, $this->collJ021tActaAies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ021tActaAies, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ016tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ002tUsuarioRelatedByCoElabora($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J021tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ021tActaAiesJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ021tActaAies === null) {
			if ($this->isNew()) {
				$this->collJ021tActaAies = array();
			} else {

				$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J021tActaAiePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ021tActaAieCriteria) || !$this->lastJ021tActaAieCriteria->equals($criteria)) {
				$this->collJ021tActaAies = J021tActaAiePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ021tActaAieCriteria = $criteria;

		return $this->collJ021tActaAies;
	}

	/**
	 * Clears out the collJ022tActaAnies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ022tActaAnies()
	 */
	public function clearJ022tActaAnies()
	{
		$this->collJ022tActaAnies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ022tActaAnies collection (array).
	 *
	 * By default this just sets the collJ022tActaAnies collection to an empty array (like clearcollJ022tActaAnies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ022tActaAnies()
	{
		$this->collJ022tActaAnies = array();
	}

	/**
	 * Gets an array of J022tActaAnie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J022tActaAnies from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J022tActaAnie[]
	 * @throws     PropelException
	 */
	public function getJ022tActaAnies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
			   $this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				J022tActaAniePeer::addSelectColumns($criteria);
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				J022tActaAniePeer::addSelectColumns($criteria);
				if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
					$this->collJ022tActaAnies = J022tActaAniePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;
		return $this->collJ022tActaAnies;
	}

	/**
	 * Returns the number of related J022tActaAnie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J022tActaAnie objects.
	 * @throws     PropelException
	 */
	public function countJ022tActaAnies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$count = J022tActaAniePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
					$count = J022tActaAniePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ022tActaAnies);
				}
			} else {
				$count = count($this->collJ022tActaAnies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J022tActaAnie object to this object
	 * through the J022tActaAnie foreign key attribute.
	 *
	 * @param      J022tActaAnie $l J022tActaAnie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ022tActaAnie(J022tActaAnie $l)
	{
		if ($this->collJ022tActaAnies === null) {
			$this->initJ022tActaAnies();
		}
		if (!in_array($l, $this->collJ022tActaAnies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ022tActaAnies, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ016tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ016tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ002tUsuarioRelatedByCoElabora($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoElabora($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ002tUsuarioRelatedByCoCustodioNiega($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoCustodioNiega($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoCustodioNiega($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J022tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ022tActaAniesJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ022tActaAnies === null) {
			if ($this->isNew()) {
				$this->collJ022tActaAnies = array();
			} else {

				$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J022tActaAniePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ022tActaAnieCriteria) || !$this->lastJ022tActaAnieCriteria->equals($criteria)) {
				$this->collJ022tActaAnies = J022tActaAniePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ022tActaAnieCriteria = $criteria;

		return $this->collJ022tActaAnies;
	}

	/**
	 * Clears out the collJ030tInformeRecomendacioness collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ030tInformeRecomendacioness()
	 */
	public function clearJ030tInformeRecomendacioness()
	{
		$this->collJ030tInformeRecomendacioness = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ030tInformeRecomendacioness collection (array).
	 *
	 * By default this just sets the collJ030tInformeRecomendacioness collection to an empty array (like clearcollJ030tInformeRecomendacioness());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ030tInformeRecomendacioness()
	{
		$this->collJ030tInformeRecomendacioness = array();
	}

	/**
	 * Gets an array of J030tInformeRecomendaciones objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J030tInformeRecomendacioness from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J030tInformeRecomendaciones[]
	 * @throws     PropelException
	 */
	public function getJ030tInformeRecomendacioness($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
			   $this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				J030tInformeRecomendacionesPeer::addSelectColumns($criteria);
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				J030tInformeRecomendacionesPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
					$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;
		return $this->collJ030tInformeRecomendacioness;
	}

	/**
	 * Returns the number of related J030tInformeRecomendaciones objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J030tInformeRecomendaciones objects.
	 * @throws     PropelException
	 */
	public function countJ030tInformeRecomendacioness(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$count = J030tInformeRecomendacionesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
					$count = J030tInformeRecomendacionesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ030tInformeRecomendacioness);
				}
			} else {
				$count = count($this->collJ030tInformeRecomendacioness);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J030tInformeRecomendaciones object to this object
	 * through the J030tInformeRecomendaciones foreign key attribute.
	 *
	 * @param      J030tInformeRecomendaciones $l J030tInformeRecomendaciones
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ030tInformeRecomendaciones(J030tInformeRecomendaciones $l)
	{
		if ($this->collJ030tInformeRecomendacioness === null) {
			$this->initJ030tInformeRecomendacioness();
		}
		if (!in_array($l, $this->collJ030tInformeRecomendacioness, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ030tInformeRecomendacioness, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ031tAccionRecomendada($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ031tAccionRecomendada($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ031tAccionRecomendada($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ002tUsuarioRelatedByCoRevisa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoRevisa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoRevisa($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ002tUsuarioRelatedByCoAprueba($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoAprueba($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoAprueba($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCreated($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J030tInformeRecomendacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ030tInformeRecomendacionessJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ030tInformeRecomendacioness === null) {
			if ($this->isNew()) {
				$this->collJ030tInformeRecomendacioness = array();
			} else {

				$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J030tInformeRecomendacionesPeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ030tInformeRecomendacionesCriteria) || !$this->lastJ030tInformeRecomendacionesCriteria->equals($criteria)) {
				$this->collJ030tInformeRecomendacioness = J030tInformeRecomendacionesPeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ030tInformeRecomendacionesCriteria = $criteria;

		return $this->collJ030tInformeRecomendacioness;
	}

	/**
	 * Clears out the collJ034tIncidentes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ034tIncidentes()
	 */
	public function clearJ034tIncidentes()
	{
		$this->collJ034tIncidentes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ034tIncidentes collection (array).
	 *
	 * By default this just sets the collJ034tIncidentes collection to an empty array (like clearcollJ034tIncidentes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ034tIncidentes()
	{
		$this->collJ034tIncidentes = array();
	}

	/**
	 * Gets an array of J034tIncidente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J014tNegocio has previously been saved, it will retrieve
	 * related J034tIncidentes from storage. If this J014tNegocio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J034tIncidente[]
	 * @throws     PropelException
	 */
	public function getJ034tIncidentes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
			   $this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				J034tIncidentePeer::addSelectColumns($criteria);
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				J034tIncidentePeer::addSelectColumns($criteria);
				if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
					$this->collJ034tIncidentes = J034tIncidentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;
		return $this->collJ034tIncidentes;
	}

	/**
	 * Returns the number of related J034tIncidente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J034tIncidente objects.
	 * @throws     PropelException
	 */
	public function countJ034tIncidentes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$count = J034tIncidentePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
					$count = J034tIncidentePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ034tIncidentes);
				}
			} else {
				$count = count($this->collJ034tIncidentes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J034tIncidente object to this object
	 * through the J034tIncidente foreign key attribute.
	 *
	 * @param      J034tIncidente $l J034tIncidente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ034tIncidente(J034tIncidente $l)
	{
		if ($this->collJ034tIncidentes === null) {
			$this->initJ034tIncidentes();
		}
		if (!in_array($l, $this->collJ034tIncidentes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ034tIncidentes, $l);
			$l->setJ014tNegocio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioApertura($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ002tUsuarioRelatedByCoUsuarioEscala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioEscala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioEscala($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioCierre($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ007tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ007tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ008tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ008tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ042tEstadoIncidente($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ042tEstadoIncidente($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ042tEstadoIncidente($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ043tTipoIncidentes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ043tTipoIncidentes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ043tTipoIncidentes($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ044tTipoHechos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ044tTipoHechos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ044tTipoHechos($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J014tNegocio is new, it will return
	 * an empty collection; or if this J014tNegocio has previously
	 * been saved, it will retrieve related J034tIncidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J014tNegocio.
	 */
	public function getJ034tIncidentesJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J014tNegocioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ034tIncidentes === null) {
			if ($this->isNew()) {
				$this->collJ034tIncidentes = array();
			} else {

				$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J034tIncidentePeer::CO_NEGOCIO, $this->co_negocio);

			if (!isset($this->lastJ034tIncidenteCriteria) || !$this->lastJ034tIncidenteCriteria->equals($criteria)) {
				$this->collJ034tIncidentes = J034tIncidentePeer::doSelectJoinJ002tUsuarioRelatedByCoUsuarioUpdate($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ034tIncidenteCriteria = $criteria;

		return $this->collJ034tIncidentes;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collJ002tUsuarios) {
				foreach ((array) $this->collJ002tUsuarios as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ008tDivisions) {
				foreach ((array) $this->collJ008tDivisions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ015tRegionNegocios) {
				foreach ((array) $this->collJ015tRegionNegocios as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ016tForenses) {
				foreach ((array) $this->collJ016tForenses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ018tInformeForenses) {
				foreach ((array) $this->collJ018tInformeForenses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ020tActaAccs) {
				foreach ((array) $this->collJ020tActaAccs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ021tActaAies) {
				foreach ((array) $this->collJ021tActaAies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ022tActaAnies) {
				foreach ((array) $this->collJ022tActaAnies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ030tInformeRecomendacioness) {
				foreach ((array) $this->collJ030tInformeRecomendacioness as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ034tIncidentes) {
				foreach ((array) $this->collJ034tIncidentes as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collJ002tUsuarios = null;
		$this->collJ008tDivisions = null;
		$this->collJ015tRegionNegocios = null;
		$this->collJ016tForenses = null;
		$this->collJ018tInformeForenses = null;
		$this->collJ020tActaAccs = null;
		$this->collJ021tActaAies = null;
		$this->collJ022tActaAnies = null;
		$this->collJ030tInformeRecomendacioness = null;
		$this->collJ034tIncidentes = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseJ014tNegocio:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseJ014tNegocio::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseJ014tNegocio
