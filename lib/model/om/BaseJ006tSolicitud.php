<?php

/**
 * Base class that represents a row from the 'j006t_solicitud' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Nov 10 11:06:18 2015
 *
 * @package    lib.model.om
 */
abstract class BaseJ006tSolicitud extends BaseObject  implements Persistent {


  const PEER = 'J006tSolicitudPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        J006tSolicitudPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_solicitud field.
	 * @var        string
	 */
	protected $co_solicitud;

	/**
	 * The value for the tx_serial field.
	 * @var        string
	 */
	protected $tx_serial;

	/**
	 * The value for the tx_solicitud field.
	 * @var        string
	 */
	protected $tx_solicitud;

	/**
	 * The value for the fe_solicitud field.
	 * @var        string
	 */
	protected $fe_solicitud;

	/**
	 * The value for the co_tipo_solicitud field.
	 * @var        string
	 */
	protected $co_tipo_solicitud;

	/**
	 * The value for the archivo field.
	 * @var        resource
	 */
	protected $archivo;

	/**
	 * The value for the mime field.
	 * @var        string
	 */
	protected $mime;

	/**
	 * The value for the co_transaccion field.
	 * @var        string
	 */
	protected $co_transaccion;

	/**
	 * The value for the co_usuario field.
	 * @var        string
	 */
	protected $co_usuario;

	/**
	 * The value for the co_region field.
	 * @var        string
	 */
	protected $co_region;

	/**
	 * The value for the tx_ruta field.
	 * @var        string
	 */
	protected $tx_ruta;

	/**
	 * The value for the nb_archivo field.
	 * @var        string
	 */
	protected $nb_archivo;

	/**
	 * @var        J001tMenu
	 */
	protected $aJ001tMenu;

	/**
	 * @var        J005tTransaccion
	 */
	protected $aJ005tTransaccion;

	/**
	 * @var        J007tRegion
	 */
	protected $aJ007tRegion;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseJ006tSolicitud object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_solicitud] column value.
	 * 
	 * @return     string
	 */
	public function getCoSolicitud()
	{
		return $this->co_solicitud;
	}

	/**
	 * Get the [tx_serial] column value.
	 * 
	 * @return     string
	 */
	public function getTxSerial()
	{
		return $this->tx_serial;
	}

	/**
	 * Get the [tx_solicitud] column value.
	 * 
	 * @return     string
	 */
	public function getTxSolicitud()
	{
		return $this->tx_solicitud;
	}

	/**
	 * Get the [optionally formatted] temporal [fe_solicitud] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFeSolicitud($format = 'Y-m-d')
	{
		if ($this->fe_solicitud === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fe_solicitud);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fe_solicitud, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [co_tipo_solicitud] column value.
	 * 
	 * @return     string
	 */
	public function getCoTipoSolicitud()
	{
		return $this->co_tipo_solicitud;
	}

	/**
	 * Get the [archivo] column value.
	 * 
	 * @return     resource
	 */
	public function getArchivo()
	{
		return $this->archivo;
	}

	/**
	 * Get the [mime] column value.
	 * 
	 * @return     string
	 */
	public function getMime()
	{
		return $this->mime;
	}

	/**
	 * Get the [co_transaccion] column value.
	 * 
	 * @return     string
	 */
	public function getCoTransaccion()
	{
		return $this->co_transaccion;
	}

	/**
	 * Get the [co_usuario] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsuario()
	{
		return $this->co_usuario;
	}

	/**
	 * Get the [co_region] column value.
	 * 
	 * @return     string
	 */
	public function getCoRegion()
	{
		return $this->co_region;
	}

	/**
	 * Get the [tx_ruta] column value.
	 * 
	 * @return     string
	 */
	public function getTxRuta()
	{
		return $this->tx_ruta;
	}

	/**
	 * Get the [nb_archivo] column value.
	 * 
	 * @return     string
	 */
	public function getNbArchivo()
	{
		return $this->nb_archivo;
	}

	/**
	 * Set the value of [co_solicitud] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setCoSolicitud($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_solicitud !== $v) {
			$this->co_solicitud = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::CO_SOLICITUD;
		}

		return $this;
	} // setCoSolicitud()

	/**
	 * Set the value of [tx_serial] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setTxSerial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_serial !== $v) {
			$this->tx_serial = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::TX_SERIAL;
		}

		return $this;
	} // setTxSerial()

	/**
	 * Set the value of [tx_solicitud] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setTxSolicitud($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_solicitud !== $v) {
			$this->tx_solicitud = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::TX_SOLICITUD;
		}

		return $this;
	} // setTxSolicitud()

	/**
	 * Sets the value of [fe_solicitud] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setFeSolicitud($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fe_solicitud !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fe_solicitud !== null && $tmpDt = new DateTime($this->fe_solicitud)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fe_solicitud = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = J006tSolicitudPeer::FE_SOLICITUD;
			}
		} // if either are not null

		return $this;
	} // setFeSolicitud()

	/**
	 * Set the value of [co_tipo_solicitud] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setCoTipoSolicitud($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_tipo_solicitud !== $v) {
			$this->co_tipo_solicitud = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::CO_TIPO_SOLICITUD;
		}

		if ($this->aJ001tMenu !== null && $this->aJ001tMenu->getCoMenu() !== $v) {
			$this->aJ001tMenu = null;
		}

		return $this;
	} // setCoTipoSolicitud()

	/**
	 * Set the value of [archivo] column.
	 * 
	 * @param      resource $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setArchivo($v)
	{
		// Because BLOB columns are streams in PDO we have to assume that they are
		// always modified when a new value is passed in.  For example, the contents
		// of the stream itself may have changed externally.
		if (!is_resource($v)) {
			$this->archivo = fopen('php://memory', 'r+');
			fwrite($this->archivo, $v);
			rewind($this->archivo);
		} else { // it's already a stream
			$this->archivo = $v;
		}
		$this->modifiedColumns[] = J006tSolicitudPeer::ARCHIVO;

		return $this;
	} // setArchivo()

	/**
	 * Set the value of [mime] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setMime($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mime !== $v) {
			$this->mime = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::MIME;
		}

		return $this;
	} // setMime()

	/**
	 * Set the value of [co_transaccion] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setCoTransaccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_transaccion !== $v) {
			$this->co_transaccion = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::CO_TRANSACCION;
		}

		if ($this->aJ005tTransaccion !== null && $this->aJ005tTransaccion->getCoTransaccion() !== $v) {
			$this->aJ005tTransaccion = null;
		}

		return $this;
	} // setCoTransaccion()

	/**
	 * Set the value of [co_usuario] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setCoUsuario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_usuario !== $v) {
			$this->co_usuario = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::CO_USUARIO;
		}

		return $this;
	} // setCoUsuario()

	/**
	 * Set the value of [co_region] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setCoRegion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_region !== $v) {
			$this->co_region = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::CO_REGION;
		}

		if ($this->aJ007tRegion !== null && $this->aJ007tRegion->getCoRegion() !== $v) {
			$this->aJ007tRegion = null;
		}

		return $this;
	} // setCoRegion()

	/**
	 * Set the value of [tx_ruta] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setTxRuta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_ruta !== $v) {
			$this->tx_ruta = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::TX_RUTA;
		}

		return $this;
	} // setTxRuta()

	/**
	 * Set the value of [nb_archivo] column.
	 * 
	 * @param      string $v new value
	 * @return     J006tSolicitud The current object (for fluent API support)
	 */
	public function setNbArchivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nb_archivo !== $v) {
			$this->nb_archivo = $v;
			$this->modifiedColumns[] = J006tSolicitudPeer::NB_ARCHIVO;
		}

		return $this;
	} // setNbArchivo()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_solicitud = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->tx_serial = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->tx_solicitud = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->fe_solicitud = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->co_tipo_solicitud = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->archivo = $row[$startcol + 5];
			$this->mime = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->co_transaccion = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->co_usuario = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->co_region = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->tx_ruta = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->nb_archivo = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 12; // 12 = J006tSolicitudPeer::NUM_COLUMNS - J006tSolicitudPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating J006tSolicitud object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aJ001tMenu !== null && $this->co_tipo_solicitud !== $this->aJ001tMenu->getCoMenu()) {
			$this->aJ001tMenu = null;
		}
		if ($this->aJ005tTransaccion !== null && $this->co_transaccion !== $this->aJ005tTransaccion->getCoTransaccion()) {
			$this->aJ005tTransaccion = null;
		}
		if ($this->aJ007tRegion !== null && $this->co_region !== $this->aJ007tRegion->getCoRegion()) {
			$this->aJ007tRegion = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J006tSolicitudPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = J006tSolicitudPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aJ001tMenu = null;
			$this->aJ005tTransaccion = null;
			$this->aJ007tRegion = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ006tSolicitud:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J006tSolicitudPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			J006tSolicitudPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseJ006tSolicitud:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ006tSolicitud:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J006tSolicitudPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseJ006tSolicitud:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			J006tSolicitudPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ001tMenu !== null) {
				if ($this->aJ001tMenu->isModified() || $this->aJ001tMenu->isNew()) {
					$affectedRows += $this->aJ001tMenu->save($con);
				}
				$this->setJ001tMenu($this->aJ001tMenu);
			}

			if ($this->aJ005tTransaccion !== null) {
				if ($this->aJ005tTransaccion->isModified() || $this->aJ005tTransaccion->isNew()) {
					$affectedRows += $this->aJ005tTransaccion->save($con);
				}
				$this->setJ005tTransaccion($this->aJ005tTransaccion);
			}

			if ($this->aJ007tRegion !== null) {
				if ($this->aJ007tRegion->isModified() || $this->aJ007tRegion->isNew()) {
					$affectedRows += $this->aJ007tRegion->save($con);
				}
				$this->setJ007tRegion($this->aJ007tRegion);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = J006tSolicitudPeer::CO_SOLICITUD;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = J006tSolicitudPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCoSolicitud($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += J006tSolicitudPeer::doUpdate($this, $con);
				}

				// Rewind the archivo LOB column, since PDO does not rewind after inserting value.
				if ($this->archivo !== null && is_resource($this->archivo)) {
					rewind($this->archivo);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ001tMenu !== null) {
				if (!$this->aJ001tMenu->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ001tMenu->getValidationFailures());
				}
			}

			if ($this->aJ005tTransaccion !== null) {
				if (!$this->aJ005tTransaccion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ005tTransaccion->getValidationFailures());
				}
			}

			if ($this->aJ007tRegion !== null) {
				if (!$this->aJ007tRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ007tRegion->getValidationFailures());
				}
			}


			if (($retval = J006tSolicitudPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J006tSolicitudPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoSolicitud();
				break;
			case 1:
				return $this->getTxSerial();
				break;
			case 2:
				return $this->getTxSolicitud();
				break;
			case 3:
				return $this->getFeSolicitud();
				break;
			case 4:
				return $this->getCoTipoSolicitud();
				break;
			case 5:
				return $this->getArchivo();
				break;
			case 6:
				return $this->getMime();
				break;
			case 7:
				return $this->getCoTransaccion();
				break;
			case 8:
				return $this->getCoUsuario();
				break;
			case 9:
				return $this->getCoRegion();
				break;
			case 10:
				return $this->getTxRuta();
				break;
			case 11:
				return $this->getNbArchivo();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = J006tSolicitudPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoSolicitud(),
			$keys[1] => $this->getTxSerial(),
			$keys[2] => $this->getTxSolicitud(),
			$keys[3] => $this->getFeSolicitud(),
			$keys[4] => $this->getCoTipoSolicitud(),
			$keys[5] => $this->getArchivo(),
			$keys[6] => $this->getMime(),
			$keys[7] => $this->getCoTransaccion(),
			$keys[8] => $this->getCoUsuario(),
			$keys[9] => $this->getCoRegion(),
			$keys[10] => $this->getTxRuta(),
			$keys[11] => $this->getNbArchivo(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J006tSolicitudPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoSolicitud($value);
				break;
			case 1:
				$this->setTxSerial($value);
				break;
			case 2:
				$this->setTxSolicitud($value);
				break;
			case 3:
				$this->setFeSolicitud($value);
				break;
			case 4:
				$this->setCoTipoSolicitud($value);
				break;
			case 5:
				$this->setArchivo($value);
				break;
			case 6:
				$this->setMime($value);
				break;
			case 7:
				$this->setCoTransaccion($value);
				break;
			case 8:
				$this->setCoUsuario($value);
				break;
			case 9:
				$this->setCoRegion($value);
				break;
			case 10:
				$this->setTxRuta($value);
				break;
			case 11:
				$this->setNbArchivo($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = J006tSolicitudPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoSolicitud($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTxSerial($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTxSolicitud($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFeSolicitud($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCoTipoSolicitud($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setArchivo($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMime($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCoTransaccion($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCoUsuario($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCoRegion($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTxRuta($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setNbArchivo($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(J006tSolicitudPeer::DATABASE_NAME);

		if ($this->isColumnModified(J006tSolicitudPeer::CO_SOLICITUD)) $criteria->add(J006tSolicitudPeer::CO_SOLICITUD, $this->co_solicitud);
		if ($this->isColumnModified(J006tSolicitudPeer::TX_SERIAL)) $criteria->add(J006tSolicitudPeer::TX_SERIAL, $this->tx_serial);
		if ($this->isColumnModified(J006tSolicitudPeer::TX_SOLICITUD)) $criteria->add(J006tSolicitudPeer::TX_SOLICITUD, $this->tx_solicitud);
		if ($this->isColumnModified(J006tSolicitudPeer::FE_SOLICITUD)) $criteria->add(J006tSolicitudPeer::FE_SOLICITUD, $this->fe_solicitud);
		if ($this->isColumnModified(J006tSolicitudPeer::CO_TIPO_SOLICITUD)) $criteria->add(J006tSolicitudPeer::CO_TIPO_SOLICITUD, $this->co_tipo_solicitud);
		if ($this->isColumnModified(J006tSolicitudPeer::ARCHIVO)) $criteria->add(J006tSolicitudPeer::ARCHIVO, $this->archivo);
		if ($this->isColumnModified(J006tSolicitudPeer::MIME)) $criteria->add(J006tSolicitudPeer::MIME, $this->mime);
		if ($this->isColumnModified(J006tSolicitudPeer::CO_TRANSACCION)) $criteria->add(J006tSolicitudPeer::CO_TRANSACCION, $this->co_transaccion);
		if ($this->isColumnModified(J006tSolicitudPeer::CO_USUARIO)) $criteria->add(J006tSolicitudPeer::CO_USUARIO, $this->co_usuario);
		if ($this->isColumnModified(J006tSolicitudPeer::CO_REGION)) $criteria->add(J006tSolicitudPeer::CO_REGION, $this->co_region);
		if ($this->isColumnModified(J006tSolicitudPeer::TX_RUTA)) $criteria->add(J006tSolicitudPeer::TX_RUTA, $this->tx_ruta);
		if ($this->isColumnModified(J006tSolicitudPeer::NB_ARCHIVO)) $criteria->add(J006tSolicitudPeer::NB_ARCHIVO, $this->nb_archivo);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(J006tSolicitudPeer::DATABASE_NAME);

		$criteria->add(J006tSolicitudPeer::CO_SOLICITUD, $this->co_solicitud);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoSolicitud();
	}

	/**
	 * Generic method to set the primary key (co_solicitud column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoSolicitud($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of J006tSolicitud (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTxSerial($this->tx_serial);

		$copyObj->setTxSolicitud($this->tx_solicitud);

		$copyObj->setFeSolicitud($this->fe_solicitud);

		$copyObj->setCoTipoSolicitud($this->co_tipo_solicitud);

		$copyObj->setArchivo($this->archivo);

		$copyObj->setMime($this->mime);

		$copyObj->setCoTransaccion($this->co_transaccion);

		$copyObj->setCoUsuario($this->co_usuario);

		$copyObj->setCoRegion($this->co_region);

		$copyObj->setTxRuta($this->tx_ruta);

		$copyObj->setNbArchivo($this->nb_archivo);


		$copyObj->setNew(true);

		$copyObj->setCoSolicitud(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     J006tSolicitud Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     J006tSolicitudPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new J006tSolicitudPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a J001tMenu object.
	 *
	 * @param      J001tMenu $v
	 * @return     J006tSolicitud The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ001tMenu(J001tMenu $v = null)
	{
		if ($v === null) {
			$this->setCoTipoSolicitud(NULL);
		} else {
			$this->setCoTipoSolicitud($v->getCoMenu());
		}

		$this->aJ001tMenu = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J001tMenu object, it will not be re-added.
		if ($v !== null) {
			$v->addJ006tSolicitud($this);
		}

		return $this;
	}


	/**
	 * Get the associated J001tMenu object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J001tMenu The associated J001tMenu object.
	 * @throws     PropelException
	 */
	public function getJ001tMenu(PropelPDO $con = null)
	{
		if ($this->aJ001tMenu === null && (($this->co_tipo_solicitud !== "" && $this->co_tipo_solicitud !== null))) {
			$c = new Criteria(J001tMenuPeer::DATABASE_NAME);
			$c->add(J001tMenuPeer::CO_MENU, $this->co_tipo_solicitud);
			$this->aJ001tMenu = J001tMenuPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ001tMenu->addJ006tSolicituds($this);
			 */
		}
		return $this->aJ001tMenu;
	}

	/**
	 * Declares an association between this object and a J005tTransaccion object.
	 *
	 * @param      J005tTransaccion $v
	 * @return     J006tSolicitud The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ005tTransaccion(J005tTransaccion $v = null)
	{
		if ($v === null) {
			$this->setCoTransaccion(NULL);
		} else {
			$this->setCoTransaccion($v->getCoTransaccion());
		}

		$this->aJ005tTransaccion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J005tTransaccion object, it will not be re-added.
		if ($v !== null) {
			$v->addJ006tSolicitud($this);
		}

		return $this;
	}


	/**
	 * Get the associated J005tTransaccion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J005tTransaccion The associated J005tTransaccion object.
	 * @throws     PropelException
	 */
	public function getJ005tTransaccion(PropelPDO $con = null)
	{
		if ($this->aJ005tTransaccion === null && (($this->co_transaccion !== "" && $this->co_transaccion !== null))) {
			$c = new Criteria(J005tTransaccionPeer::DATABASE_NAME);
			$c->add(J005tTransaccionPeer::CO_TRANSACCION, $this->co_transaccion);
			$this->aJ005tTransaccion = J005tTransaccionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ005tTransaccion->addJ006tSolicituds($this);
			 */
		}
		return $this->aJ005tTransaccion;
	}

	/**
	 * Declares an association between this object and a J007tRegion object.
	 *
	 * @param      J007tRegion $v
	 * @return     J006tSolicitud The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ007tRegion(J007tRegion $v = null)
	{
		if ($v === null) {
			$this->setCoRegion(NULL);
		} else {
			$this->setCoRegion($v->getCoRegion());
		}

		$this->aJ007tRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J007tRegion object, it will not be re-added.
		if ($v !== null) {
			$v->addJ006tSolicitud($this);
		}

		return $this;
	}


	/**
	 * Get the associated J007tRegion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J007tRegion The associated J007tRegion object.
	 * @throws     PropelException
	 */
	public function getJ007tRegion(PropelPDO $con = null)
	{
		if ($this->aJ007tRegion === null && (($this->co_region !== "" && $this->co_region !== null))) {
			$c = new Criteria(J007tRegionPeer::DATABASE_NAME);
			$c->add(J007tRegionPeer::CO_REGION, $this->co_region);
			$this->aJ007tRegion = J007tRegionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ007tRegion->addJ006tSolicituds($this);
			 */
		}
		return $this->aJ007tRegion;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aJ001tMenu = null;
			$this->aJ005tTransaccion = null;
			$this->aJ007tRegion = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseJ006tSolicitud:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseJ006tSolicitud::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseJ006tSolicitud
